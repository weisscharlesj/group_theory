import pytestimport numpy as npfrom ..grouptheory import Symmetryfrom ..charactertables import tables, headers, mulliken, rot_trans_modes, IR_active, Raman_active, masks, atom_contributionpg = ('C1', 'Cs', 'Ci', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'D2',       'D3', 'D4', 'D5', 'D6', 'C2v', 'C3v', 'C4v', 'C5v', 'C6v', 'C2h',      'C3h', 'C4h', 'C5h', 'C6h', 'D2h', 'D3h', 'D4h', 'D5h', 'D6h', 'D8h',      'D2d', 'D3d', 'D4d', 'D5d', 'D6d', 'S4', 'S6', 'S8', 'T', 'Th', 'Td',      'O', 'Oh', 'I', 'Ih')# Test data with (reducible representation, num of each irreducibles, point group)test_data = (            ((2), (2), 'c1'),            ((2, 0), (1, 1), 'cs'),            ((3, 1), (2, 1), 'ci'),            ((3, 1), (2, 1), 'c2'),            ((3, 0, 0), (1, 1), 'C3'),            ((4, 0, 0, 0), (1, 1, 1), 'c4'),            ((21, 1, 1, 1, 1), (5, 4, 4), 'c5'),            ([9, -1, 3, 1], [3, 1, 3, 2], 'c2v'),            ([3, 0, 1], (1, 0, 1), 'c3v'),            ((6, 0, 2, 0, 0), (1, 1, 1, 1, 1), 'c4v'),            ((4, 0, 2, 2), (2, 1, 0, 1), 'c2h'),            ([15, 0, 0, 7, -2, -2], [3, 4, 2, 1], 'c3h'),            ((4, 0, 0, 0), (1, 1, 1, 1), 'd2'),            ([4, 1, 0, 0, 2], (1, 0, 0, 0, 1), 'Td'),            ([4, 0, 0, 2, 0, 0, 0, 4, 2, 0],(1, 0, 1, 0, 0, 0, 0, 0, 0, 1), 'd4h'),            ((5, 2, 1, 3, 0, 3), (2, 0, 1, 0, 1, 0), 'd3h'),            ([6, 0, 0, 2, 2, 0, 0, 0, 4, 2], (1, 0, 1, 0, 0, 0, 0, 0, 1, 0), 'Oh'),            ((6, 0, 0, 0, 0, 0), (1, 1, 1, 1), 'c6')            )@pytest.mark.parametrize('gamma, true_n_irred, group', test_data)def test_decomp_reduc(gamma, true_n_irred, group):    calc_n_irred = Symmetry(group, gamma).decomp_reduc()        assert np.all(true_n_irred == calc_n_irred)         def test_decomp():    water = gt.Symmetry('c2v', [9, -1, 3, 1])    n_irred = water.decomp_reduc()        assert np.all(n_irred == np.array([3, 1, 3, 2]))        ### Methods Testsdef test_vibe():    water = gt.Symmetry('c2v', [9, -1, 3, 1])    tDCE = gt.Symmetry('C2h', [18, 0, 0, 6])        assert np.all(water.vibe_modes() == np.array([2, 0, 1, 0]))    assert np.all(tDCE.vibe_modes() == np.array([5, 1, 2, 4]))    def test_ir():    water = gt.Symmetry('c2v', [9, -1, 3, 1], vibe_only=False)    pentCOMn = gt.Symmetry('d3h', [5, 2, 1, 3, 0, 3], vibe_only=True)    tDCE = gt.Symmetry('C2h', [18, 0, 0, 6], vibe_only=False)            assert np.all(water.ir_active() == np.array([2, 0, 1, 0]))    assert np.all(pentCOMn.ir_active() == np.array([0, 0, 1, 0, 1, 0]))    assert np.all(tDCE.ir_active() == np.array([0, 0, 2, 4]))    def test_raman():    water = gt.Symmetry('c2v', [9, -1, 3, 1], vibe_only=True)    tDCE = gt.Symmetry('C2h', [18, 0, 0, 6], vibe_only=False)        assert np.all(water.raman_active() == np.array([2, 0, 1, 0]))    assert np.all(tDCE.raman_active() == np.array([5, 1, 0, 0]))    ### Helper function tests    def test_get_mulliken():    assert gt.get_mulliken('c2h') == ('Ag', 'Bg', 'Au', 'Bu')    def test_get_reducible_atoms():    assert np.all(gt.get_reducible_atoms([6, 0, 0, 6], 'c2h') == np.array([18, 0, 0, 6]))    assert np.all(gt.get_reducible_atoms([3, 1, 3, 1], 'c2v') == np.array([9, -1, 3, 1]))            